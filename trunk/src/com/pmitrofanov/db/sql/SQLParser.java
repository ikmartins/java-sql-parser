/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package com.pmitrofanov.db.sql;

public class SQLParser implements SQLParserConstants {

  public static void main(String args[]) throws ParseException {
    SQLParser parser;
    parser = new SQLParser(System.in);
    parser.SqlScript();
  }

/**************************************
 *           NONTERMINALS             *
 **************************************/
  static final public void SqlScript() throws ParseException {
    label_1:
    while (true) {
      SqlStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static final public void SqlStatement() throws ParseException {
    SqlOperator();
    jj_consume_token(SEMICOLON);
  }

  static final public void SqlOperator() throws ParseException {
    Query();
  }

// ##############################################################

/*
<query> ::=
	SELECT
	[ ALL | DISTINCT ] { <select list> | <asterisk> }
	[ <from list>
		[ <where clause> ]
		[ <group by clause> ]
		[ <having clause> ]
		[ <order by clause> ]
		[ <limit clause> ]
	]
*/
  static final public void Query() throws ParseException {
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      case DISTINCT:
        jj_consume_token(DISTINCT);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      jj_consume_token(ASTERISK);
      break;
    case AGGREGATE:
    case AVG:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case EXISTS:
    case FALSE:
    case MAX:
    case MIN:
    case NOT:
    case NULL:
    case SUM:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case L_PAREN:
    case PLUS:
    case MINUS:
    case EXCLAMATION:
    case TILDE:
      SelectList();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      FromList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        WhereClause();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
        GroupByClause();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAVING:
        HavingClause();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER:
        OrderByClause();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIMIT:
        LimitClause();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

/*
<select list> ::=
	<select expression>
	<select list rest>

<select list rest> ::=
	[ <comma> <select expression>
	<select list rest> ]
*/
  static final public void SelectList() throws ParseException {
    SelectExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      SelectExpression();
    }
  }

/*
<select expression> ::=
	  <relation spec> <period> <asterisk>
	| <value expression> [ [ AS ] <alias> ]
*/
  static final public void SelectExpression() throws ParseException {
    if (jj_2_2(5)) {
      RelationName();
      jj_consume_token(PERIOD);
      jj_consume_token(ASTERISK);
    } else if (jj_2_3(5)) {
      SchemaName();
      jj_consume_token(PERIOD);
      RelationName();
      jj_consume_token(PERIOD);
      jj_consume_token(ASTERISK);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AGGREGATE:
      case AVG:
      case CASE:
      case CAST:
      case CONVERT:
      case COUNT:
      case EXISTS:
      case FALSE:
      case MAX:
      case MIN:
      case NOT:
      case NULL:
      case SUM:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case L_PAREN:
      case PLUS:
      case MINUS:
      case EXCLAMATION:
      case TILDE:
        ValueExpression();
        if (jj_2_1(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            jj_consume_token(AS);
            break;
          default:
            jj_la1[11] = jj_gen;
            ;
          }
          Alias();
        } else {
          ;
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
<from list> ::=
        FROM
	<from list expression>
	<from list rest>

<from list rest> ::=
	[ <comma> <from list expression>
	<from list rest> ]
*/
  static final public void FromList() throws ParseException {
    jj_consume_token(FROM);
    FromListExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      FromListExpression();
    }
  }

/*

<from list expression> ::=
	  <relation> [ <joined relations> ]
*/
  static final public void FromListExpression() throws ParseException {
    Relation();
    label_4:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_4;
      }
      JoinClause();
    }
  }

/*
<relation> ::=
	  <single relation>
	| <named subquery>
*/
  static final public void Relation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      SingleRelation();
      break;
    case L_PAREN:
      NamedSubquery();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
<named subquery> ::=
	<subquery> [ [ AS ] <alias> ]
*/
  static final public void NamedSubquery() throws ParseException {
    Subquery();
    if (jj_2_5(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      Alias();
    } else {
      ;
    }
  }

/*
<subquery> ::=
	<left paren> <query> <right paren>
*/
  static final public void Subquery() throws ParseException {
    jj_consume_token(L_PAREN);
    Query();
    jj_consume_token(R_PAREN);
  }

/*
<single relation> ::=
	<relation spec> [ [ AS ] <alias> ]
*/
  static final public void SingleRelation() throws ParseException {
    RelationSpec();
    if (jj_2_6(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      Alias();
    } else {
      ;
    }
  }

/*
<relation spec> ::= [ <schema name> <period> ] <relation name>
*/
  static final public void RelationSpec() throws ParseException {
    if (jj_2_7(2)) {
      SchemaName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    RelationName();
  }

/*
<schema name> ::= <identifier>
*/
  static final public void SchemaName() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

/*
<relation name> ::= <identifier>
*/
  static final public void RelationName() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

/*
<join clause> ::=
	  <inner join spec> <on clause>
	| <outer join spec> <on clause>
	| <cross join spec>
*/
  static final public void JoinClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INNER:
    case JOIN:
      InnerJoinSpec();
      OnClause();
      break;
    case LEFT:
    case RIGHT:
      OuterJoinSpec();
      OnClause();
      break;
    case CROSS:
      CrossJoinSpec();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
<inner join spec> ::=
	[ INNER ] JOIN <from list expression>
*/
  static final public void InnerJoinSpec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INNER:
      jj_consume_token(INNER);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(JOIN);
    FromListExpression();
  }

/*
<outer join spec> ::=
	{ LEFT | RIGHT } [ OUTER ] JOIN <from list expression>
*/
  static final public void OuterJoinSpec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT:
      jj_consume_token(LEFT);
      break;
    case RIGHT:
      jj_consume_token(RIGHT);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUTER:
      jj_consume_token(OUTER);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(JOIN);
    FromListExpression();
  }

/*
<cross join spec> ::=
	CROSS JOIN <from list expression>
*/
  static final public void CrossJoinSpec() throws ParseException {
    jj_consume_token(CROSS);
    jj_consume_token(JOIN);
    FromListExpression();
  }

/*
<on clause> ::=
	ON <search condition>
*/
  static final public void OnClause() throws ParseException {
    jj_consume_token(ON);
    SearchCondition();
  }

/*
<where clause> ::=
	WHERE <search condition>
*/
  static final public void WhereClause() throws ParseException {
    jj_consume_token(WHERE);
    SearchCondition();
  }

/*
<having clause> ::=
	HAVING <search condition>
*/
  static final public void HavingClause() throws ParseException {
    jj_consume_token(HAVING);
    SearchCondition();
  }

/*
<group by clause> ::=
	GROUP BY <group by list>
*/
  static final public void GroupByClause() throws ParseException {
    jj_consume_token(GROUP);
    jj_consume_token(BY);
    GroupByList();
  }

/*
<group by list> ::=
	<group by expression>
	<group by list rest>

<group by list rest> ::=
	[ <comma> <group by expression>
	<group by list rest> ]
*/
  static final public void GroupByList() throws ParseException {
    GroupByExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      GroupByExpression();
    }
  }

/*
<group by expression> ::= <value expression>
*/
  static final public void GroupByExpression() throws ParseException {
    ValueExpression();
  }

/*
<order by clause> ::=
	ORDER BY <order by list>
*/
  static final public void OrderByClause() throws ParseException {
    jj_consume_token(ORDER);
    jj_consume_token(BY);
    OrderByList();
  }

/*
<order by list> ::=
	<order by expression>
	<order by list rest>

<order by list rest> ::=
	[ <comma> <order by expression>
	<order by list rest> ]
*/
  static final public void OrderByList() throws ParseException {
    OrderByExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      OrderByExpression();
    }
  }

/*
<order by expression> ::= <value expression> [ ASC | DESC ]
*/
  static final public void OrderByExpression() throws ParseException {
    ValueExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);
        break;
      case DESC:
        jj_consume_token(DESC);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

/*
<limit clause> ::=
	LIMIT <limit offset> [ <comma> <limit count> ]
*/
  static final public void LimitClause() throws ParseException {
    jj_consume_token(LIMIT);
    LimitOffset();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      LimitCount();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

/*
<limit offset> ::= <value expression>
*/
  static final public void LimitOffset() throws ParseException {
    ValueExpression();
  }

/*
<limit count> ::= <value expression>
*/
  static final public void LimitCount() throws ParseException {
    ValueExpression();
  }

// ##############################################################

/*
<value expression> ::=
	  <binary operator>
	| <parenthesized expression>
*/

/*
void ValueExpression() :
{}
{
        LOOKAHEAD(2) BinaryOperator()
    |   ParenthesizedExpression()
}
*/
/*
<binary operator> ::=
	<operand expression>
	<binary operator rest>

<binary operator rest> ::=
	[
		{ <arithmetical operator>
		| <equality test>
		| <logical test>
		| <null test>
		| <between test> }
		<binary operator rest>
	]
*/
  static final public void ValueExpression() throws ParseException {
    OperandExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case BETWEEN:
      case DIV:
      case IN:
      case IS:
      case LIKE:
      case MOD:
      case OR:
      case XOR:
      case PLUS:
      case MINUS:
      case ASTERISK:
      case SLASH:
      case PERCENT:
      case LT:
      case GT:
      case EQ:
      case LTE:
      case GTE:
      case NE:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
      case MOD:
      case PLUS:
      case MINUS:
      case ASTERISK:
      case SLASH:
      case PERCENT:
        ArithmeticalOperator();
        break;
      case LT:
      case GT:
      case EQ:
      case LTE:
      case GTE:
      case NE:
        EqualityTest();
        break;
      case AND:
      case LIKE:
      case OR:
      case XOR:
        LogicalTest();
        break;
      case IS:
        NullTest();
        break;
      case BETWEEN:
        BetweenTest();
        break;
      case IN:
        InTest();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
<arithmetical operator> ::=
	{ <plus> | <minus> | <asterisk> | <slash> | <percent> | DIV | MOD }
	<operand expression>
*/
  static final public void ArithmeticalOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case ASTERISK:
      jj_consume_token(ASTERISK);
      break;
    case SLASH:
      jj_consume_token(SLASH);
      break;
    case PERCENT:
      jj_consume_token(PERCENT);
      break;
    case DIV:
      jj_consume_token(DIV);
      break;
    case MOD:
      jj_consume_token(MOD);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    OperandExpression();
  }

/*
<equality test> ::=
	{ <lt> | <gt> | <eq> | <lte> | <gte> | <ne> }
	<operand expression>
*/
  static final public void EqualityTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
      break;
    case GT:
      jj_consume_token(GT);
      break;
    case EQ:
      jj_consume_token(EQ);
      break;
    case LTE:
      jj_consume_token(LTE);
      break;
    case GTE:
      jj_consume_token(GTE);
      break;
    case NE:
      jj_consume_token(NE);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    OperandExpression();
  }

/*
<logical test> ::=
	{ LIKE | AND | OR | XOR }
	<operand expression>
*/
  static final public void LogicalTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIKE:
      jj_consume_token(LIKE);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    OperandExpression();
  }

/*
<null test> ::=
	IS [ NOT ] NULL
*/
  static final public void NullTest() throws ParseException {
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
  }

/*
<between test> ::=
	BETWEEN <operand expression>
	AND <operand expression>
*/
  static final public void BetweenTest() throws ParseException {
    jj_consume_token(BETWEEN);
    OperandExpression();
    jj_consume_token(AND);
    OperandExpression();
  }

/*
<parenthesized expression> ::=
	<left paren>
	<value expression>
	<right paren>
*/
  static final public void ParenthesizedExpression() throws ParseException {
    jj_consume_token(L_PAREN);
    ValueExpression();
    jj_consume_token(R_PAREN);
  }

/*
<operand expression> ::=
	  <unary operator>
	| <unary operand>
*/
  static final public void OperandExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case PLUS:
    case MINUS:
    case EXCLAMATION:
    case TILDE:
      UnaryOperator();
      break;
    case AGGREGATE:
    case AVG:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case EXISTS:
    case FALSE:
    case MAX:
    case MIN:
    case NULL:
    case SUM:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case L_PAREN:
      UnaryOperand();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
<unary operator> ::=
	{ <exclamation> | NOT | <tilde> | <minus> }
	<operand expression>
*/
  static final public void UnaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXCLAMATION:
      jj_consume_token(EXCLAMATION);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    case TILDE:
      jj_consume_token(TILDE);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    OperandExpression();
  }

/*
<unary operand> ::=
	  <function call>
	| <subquery>
	| <literal>
	| <column expression>
*/
  static final public void UnaryOperand() throws ParseException {
    if (jj_2_8(2)) {
      FunctionCall();
    } else if (jj_2_9(2)) {
      Subquery();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
        Literal();
        break;
      case IDENTIFIER:
        ColumnExpression();
        break;
      case L_PAREN:
        ParenthesizedExpression();
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
<function call> ::=
	  <ordinary function call>
	| <aggregate function call>
	| <built-in function call>
*/
  static final public void FunctionCall() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      OrdinaryFunctionCall();
      break;
    case AGGREGATE:
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
      AggregateFunctionCall();
      break;
    case CASE:
    case CAST:
    case CONVERT:
    case EXISTS:
      BuiltInFunctionCall();
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
<ordinary function call> ::=
	<function name>
	<left paren> <arg list> <right paren>
*/
  static final public void OrdinaryFunctionCall() throws ParseException {
    FunctionName();
    jj_consume_token(L_PAREN);
    ArgList();
    jj_consume_token(R_PAREN);
  }

/*
<function name> ::= <identifier>
*/
  static final public void FunctionName() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

/*
<arg list> ::=
	<argument>
	<arg list rest>

<arg list rest> ::=
	[ <comma> <argument>
	<arg list rest> ]
*/
  static final public void ArgList() throws ParseException {
    Argument();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      Argument();
    }
  }

/*
<aggregate function call> ::=
	{ MIN | MAX | COUNT | AVG | SUM | AGGREGATE <function name> }
	<left paren> [ ALL | DISTINCT ] { ASTERISK | <argument> } <right paren>
*/
  static final public void AggregateFunctionCall() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIN:
      jj_consume_token(MIN);
      break;
    case MAX:
      jj_consume_token(MAX);
      break;
    case COUNT:
      jj_consume_token(COUNT);
      break;
    case AVG:
      jj_consume_token(AVG);
      break;
    case SUM:
      jj_consume_token(SUM);
      break;
    case AGGREGATE:
      jj_consume_token(AGGREGATE);
      FunctionName();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(L_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      case DISTINCT:
        jj_consume_token(DISTINCT);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      jj_consume_token(ASTERISK);
      break;
    case AGGREGATE:
    case AVG:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case EXISTS:
    case FALSE:
    case MAX:
    case MIN:
    case NOT:
    case NULL:
    case SUM:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case L_PAREN:
    case PLUS:
    case MINUS:
    case EXCLAMATION:
    case TILDE:
      Argument();
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(R_PAREN);
  }

/*
<built-in function call> ::=
	  <cast call>
	| <convert call>
	| <exists call>
	| <in call>
	| <case call>
*/
  static final public void BuiltInFunctionCall() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CAST:
      CastCall();
      break;
    case CONVERT:
      ConvertCall();
      break;
    case EXISTS:
      ExistsCall();
      break;
    case CASE:
      CaseCall();
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
<cast call> ::=
	CAST <left paren>
	<argument> AS <type>
	<right paren>
*/
  static final public void CastCall() throws ParseException {
    jj_consume_token(CAST);
    jj_consume_token(L_PAREN);
    Argument();
    jj_consume_token(AS);
    Type();
    jj_consume_token(R_PAREN);
  }

/*
<convert call> ::=
	CONVERT <left paren>
	<argument> <right paren>
	USING <encoding name>
*/
  static final public void ConvertCall() throws ParseException {
    jj_consume_token(CONVERT);
    jj_consume_token(L_PAREN);
    Argument();
    jj_consume_token(USING);
    EncodingName();
    jj_consume_token(R_PAREN);
  }

/*
<exists call> ::=
	EXISTS <subquery>
*/
  static final public void ExistsCall() throws ParseException {
    jj_consume_token(EXISTS);
    Subquery();
  }

/*
<in call> ::=
	IN { <subquery> | <left paren> <arg list> <right paren> }
*/
  static final public void InTest() throws ParseException {
    jj_consume_token(IN);
    if (jj_2_10(2)) {
      Subquery();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_PAREN:
        jj_consume_token(L_PAREN);
        ArgList();
        jj_consume_token(R_PAREN);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
<case call> ::=
	CASE { <simple case expression> | <searched case expression> } END
*/
  static final public void CaseCall() throws ParseException {
    jj_consume_token(CASE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AGGREGATE:
    case AVG:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case EXISTS:
    case FALSE:
    case MAX:
    case MIN:
    case NOT:
    case NULL:
    case SUM:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case L_PAREN:
    case PLUS:
    case MINUS:
    case EXCLAMATION:
    case TILDE:
      SimpleCaseExpression();
      break;
    case WHEN:
      SearchedCaseExpression();
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(END);
  }

/*
<simple case expression> ::=
	<value expression>
	<searched case expression>
*/
  static final public void SimpleCaseExpression() throws ParseException {
    ValueExpression();
    SearchedCaseExpression();
  }

/*
<searched case expression> ::=
	<when clauses>
	ELSE <default expression>
*/
  static final public void SearchedCaseExpression() throws ParseException {
    WhenClauses();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      DefaultExpression();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
  }

/*
<when clauses> ::=
	<when clause>
	<when clauses rest>

<when clauses rest> ::=
	[ <when clause> ]
*/
  static final public void WhenClauses() throws ParseException {
    label_9:
    while (true) {
      WhenClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_9;
      }
    }
  }

/*
<when clause> ::=
	WHEN <when test>
	THEN <when option expression>
*/
  static final public void WhenClause() throws ParseException {
    jj_consume_token(WHEN);
    WhenTest();
    jj_consume_token(THEN);
    WhenOptionExpression();
  }

/*
<when test> ::= <value expression>
*/
  static final public void WhenTest() throws ParseException {
    ValueExpression();
  }

/*
<when option expression> ::= <value expression>
*/
  static final public void WhenOptionExpression() throws ParseException {
    ValueExpression();
  }

/*
<default expression> ::= <value expression>
*/
  static final public void DefaultExpression() throws ParseException {
    ValueExpression();
  }

/*
<encoding name> ::= <identifier>
*/
  static final public void EncodingName() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

/*
<argument> ::= <value expression>
*/
  static final public void Argument() throws ParseException {
    ValueExpression();
  }

/*
<column expression> ::=
	  <fully-qualified column name>
	| <qualified column name>
	| <unqualified column name>
*/
  static final public void ColumnExpression() throws ParseException {
    if (jj_2_11(4)) {
      FullyQualifiedColumnName();
    } else if (jj_2_12(2)) {
      QualifiedColumnName();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        UnqualifiedColumnName();
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
<fully-qualified column name> ::=
	<schema name> <period> <relation name> <period> <column name>
*/
  static final public void FullyQualifiedColumnName() throws ParseException {
    SchemaName();
    jj_consume_token(PERIOD);
    RelationName();
    jj_consume_token(PERIOD);
    ColumnName();
  }

/*
<qualified column name> ::=
	<relation name or alias> <period> <column name>
*/
  static final public void QualifiedColumnName() throws ParseException {
    RelationNameOrAlias();
    jj_consume_token(PERIOD);
    ColumnName();
  }

/*
<relation name or alias> ::= <identifier>
*/
  static final public void RelationNameOrAlias() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

/*
<unqualified column name> ::= <column name>
*/
  static final public void UnqualifiedColumnName() throws ParseException {
    ColumnName();
  }

/*
<column name> ::= <identifier>
*/
  static final public void ColumnName() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

/*
<alias> ::= <identifier>
*/
  static final public void Alias() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

/*
<search condition> ::= <value expression>
*/
  static final public void SearchCondition() throws ParseException {
    ValueExpression();
  }

// ##############################################################

/*
<literal> ::=
	  <numeric or string literal>
	| <boolean literal>
	| <null literal>
*/
  static final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
      NumericOrStringLiteral();
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NULL:
      NullLiteral();
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NumericOrStringLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
<boolean literal> ::= TRUE | FALSE
*/
  static final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
<null literal> ::= NULL
*/
  static final public void NullLiteral() throws ParseException {
    jj_consume_token(NULL);
  }

// ##############################################################

/*
<type> ::=
	  <numeric type>
	| <string type>
	| <boolean type>
	| <datetime type>
*/
  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIGINT:
    case INT:
    case INTEGER:
    case SMALLINT:
    case TINYINT:
      NumericType();
      break;
    case CHAR:
    case VARCHAR:
      StringType();
      break;
    case BOOLEAN:
      BooleanType();
      break;
    case DATE:
    case DATETIME:
    case TIME:
      DatetimeType();
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
<numeric type> ::= TINYINT | SMALLINT | INT | INTEGER | BIGINT
*/
  static final public void NumericType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TINYINT:
      jj_consume_token(TINYINT);
      break;
    case SMALLINT:
      jj_consume_token(SMALLINT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case BIGINT:
      jj_consume_token(BIGINT);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
<string type> ::= CHAR | VARCHAR
*/
  static final public void StringType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case VARCHAR:
      jj_consume_token(VARCHAR);
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
<boolean type> ::= BOOLEAN
*/
  static final public void BooleanType() throws ParseException {
    jj_consume_token(BOOLEAN);
  }

/*
<datetime type> ::= DATE | TIME | DATETIME
*/
  static final public void DatetimeType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATE:
      jj_consume_token(DATE);
      break;
    case TIME:
      jj_consume_token(TIME);
      break;
    case DATETIME:
      jj_consume_token(DATETIME);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_3R_40() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(EXISTS)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(CONVERT)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(AGGREGATE)) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(CAST)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(CROSS)) return true;
    if (jj_scan_token(JOIN)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(56)) jj_scanpos = xsp;
    if (jj_scan_token(JOIN)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(WHEN)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    if (jj_3R_51()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SQLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[54];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40001000,0x40001000,0x3610800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x3610800,0x0,0x0,0x4000,0x4000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x20008000,0x20008000,0x0,0x80022000,0x80022000,0x80000000,0x0,0x2000,0x0,0x3610800,0x0,0x0,0x3610800,0x0,0x2010800,0x40001000,0x40001000,0x3610800,0x1600000,0x0,0x3610800,0x0,0x0,0x0,0x0,0x0,0x0,0x188c0000,0x40000,0x800000,0x18000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000000,0x0,0x0,0x201b000c,0x0,0x20,0x40,0x800000,0x8000,0x10,0x0,0x0,0x201b000c,0x0,0x0,0x0,0x0,0x2003100,0x100,0x2002000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x444880,0x444880,0x40000,0x0,0x404000,0x80000,0x201b000c,0x80000,0x100008,0x20030004,0x0,0x20030000,0x0,0x0,0x201b000c,0x4,0x0,0x201b000c,0x1,0x0,0x0,0x100008,0x0,0x8,0x8000600,0x8000600,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0xe825104,0x40,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x6825104,0x200000,0x820000,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x0,0x0,0x200000,0xfe000080,0xfe000080,0x3e000000,0xc0000000,0x80,0x0,0x6825104,0x6000000,0x825104,0x20000,0x200000,0x0,0x0,0x0,0xe825104,0x0,0x800000,0x6825124,0x0,0x20,0x20000,0x5104,0x5100,0x4,0x13,0x2,0x10,0x1,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xf,0x0,0xf,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[12];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[104];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 54; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 104; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  // generated parser is inserted here.
}
