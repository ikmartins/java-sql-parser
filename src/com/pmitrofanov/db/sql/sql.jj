/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. sql.jj */
/*@egen*/options {
                           
                            
    IGNORE_CASE = true;
    STATIC = false;
}

PARSER_BEGIN(SQLParser)

package com.pmitrofanov.db.sql;

import java.io.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;

public class SQLParser/*@bgen(jjtree)*/implements SQLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTSQLParserState jjtree = new JJTSQLParserState();

/*@egen*/

    private DocumentBuilderFactory documentBuilderFactory;
    private DocumentBuilder documentBuilder;
    private Document document;
    private Element rootElement;

    public Document getDocument() {
        return document;
    }

    public void setUpDOM() throws ParserConfigurationException {
        documentBuilderFactory = DocumentBuilderFactory.newInstance();
        documentBuilder = documentBuilderFactory.newDocumentBuilder();
        document = documentBuilder.newDocument();
        rootElement = document.createElement("sql");
        document.appendChild(rootElement);
    }

    public void populateDOM() throws ParseException {
        rootElement.appendChild(SqlScript().getElement());
    }

    public static void main(String args[]) {
        String fileName = "test.sql";
        try {
            SQLParser parser = new SQLParser(new FileReader(fileName));
            parser.setUpDOM();
            parser.populateDOM();
            System.out.println("Parsed successfully.");
        } catch (IOException e) {
            System.out.println("File not found: " + fileName);
        } catch (ParseException e) {
            System.out.println("Parse failed due to incorrect input. See details below.");
            System.out.println(e.getStackTrace());
        } catch (ParserConfigurationException e) {
            System.out.println("Problems with the parser configuration. See details below.");
            System.out.println(e.getStackTrace());
        } catch (Exception e) {
            System.out.println("Oops, an unrecognised error. See details below.");
            System.out.println(e.getStackTrace());
        }
    }

}

PARSER_END(SQLParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "--" : IN_SINGLE_LINE_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < AGGREGATE: "aggregate" >
| < ALL: "all" >
| < AND: "and" >
| < AS: "as" >
| < ASC: "asc" >
| < AVG: "avg" >
| < BETWEEN: "between" >
| < BIGINT: "bigint" >
| < BOOLEAN: "boolean" >
| < BY: "by" >
| < CASE: "case" >
| < CAST: "cast" >
| < CHAR: "char" >
| < CONVERT: "convert" >
| < COUNT: "count" >
| < CROSS: "cross" >
| < DATE: "date" >
| < DATETIME: "datetime" >
| < DESC: "desc" >
| < DISTINCT: "distinct" >
| < DIV: "div" >
| < ELSE: "else" >
| < END: "end" >
| < EXISTS: "exists" >
| < FALSE: "false" >
| < FROM: "from" >
| < GROUP: "group" >
| < HAVING: "having" >
| < IN: "in" >
| < INNER: "inner" >
| < INT: "int" >
| < INTEGER: "integer" >
| < IS: "is" >
| < JOIN: "join" >
| < LEFT: "left" >
| < LIKE: "like" >
| < LIMIT: "limit" >
| < MAX: "max" >
| < MIN: "min" >
| < MOD: "mod" >
| < NOT: "not" >
| < NULL: "null" >
| < ON: "on" >
| < OR: "or" >
| < ORDER: "order" >
| < OUTER: "outer" >
| < RIGHT: "right" >
| < SELECT: "select" >
| < SMALLINT: "smallint" >
| < START: "start" >
| < SUM: "sum" >
| < SYMBOL: "symbol" >
| < THEN: "then" >
| < TIME: "time" >
| < TINYINT: "tinyint" >
| < TRUE: "true" >
| < USING: "using" >
| < VARCHAR: "varchar" >
| < WHEN: "when" >
| < WHERE: "where" >
| < XOR: "xor" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
        <SQ_STRING_LITERAL>
      | <DQ_STRING_LITERAL>
  >
|
  < #SQ_STRING_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
  >
|
  < #DQ_STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [
         "$",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < SEMICOLON: ";" >
| < COMMA: "," >
| < PERIOD: "." >
| < L_PAREN: "(" >
| < R_PAREN: ")" >
| < PLUS: "+" >
| < MINUS: "-">
| < ASTERISK: "*" >
| < SLASH: "/" >
| < PERCENT: "%" >
| < LT: "<" >
| < GT: ">" >
| < EQ: "=" >
| < LTE: "<=" >
| < GTE: ">=" >
| < NE: <NE1> | <NE2> >
| < #NE1: "<>" >
| < #NE2: "!=" >
| < EXCLAMATION: "!" >
| < TILDE: "~" >
}


/**************************************
 *           NONTERMINALS             *
 **************************************/



SQLNode SqlScript() :
{/*@bgen(jjtree) SqlScript */
  SQLNode jjtn000 = new SQLNode(this, JJTSQLSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SqlScript */
  try {
/*@egen*/
  (
    SqlStatement()
  )+
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void SqlStatement() :
{/*@bgen(jjtree) SqlStatement */
  SQLNode jjtn000 = new SQLNode(this, JJTSQLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SqlStatement */
  try {
/*@egen*/
  SqlOperator() <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void SqlOperator() :
{/*@bgen(jjtree) SqlOperator */
  SQLNode jjtn000 = new SQLNode(this, JJTSQLOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SqlOperator */
  try {
/*@egen*/
  Query()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  /* alternatively, DDL or DML */
}


// ##############################################################

/*
<query> ::=
	SELECT
	[ ALL | DISTINCT ] { <select list> | <asterisk> }
	[ <from list>
		[ <where clause> ]
		[ <group by clause> ]
		[ <having clause> ]
		[ <order by clause> ]
		[ <limit clause> ]
	]
*/
void Query() :
{/*@bgen(jjtree) Query */
  SQLNode jjtn000 = new SQLNode(this, JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Query */
  try {
/*@egen*/
  <SELECT>
  [ Modifier() ]
  ( Asterisk() | SelectList() )
  [ FromList()
    [ WhereClause() ]
    [ GroupByClause() ]
    [ HavingClause() ]
    [ OrderByClause() ]
    [ LimitClause() ]
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Modifier() :
{/*@bgen(jjtree) Modifier */
  SQLNode jjtn000 = new SQLNode(this, JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Modifier */
    try {
/*@egen*/
    ( t = <ALL>
    | t = <DISTINCT> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setTextValue(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Asterisk() :
{/*@bgen(jjtree) Asterisk */
  SQLNode jjtn000 = new SQLNode(this, JJTASTERISK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Asterisk */
    try {
/*@egen*/
    <ASTERISK>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<select list> ::=
	<select expression>
	<select list rest>

<select list rest> ::=
	[ <comma> <select expression>
	<select list rest> ]
*/

void SelectList() :
{/*@bgen(jjtree) SelectList */
  SQLNode jjtn000 = new SQLNode(this, JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectList */
    try {
/*@egen*/
    SelectExpression()
    ( <COMMA> SelectExpression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<select expression> ::=
	  <relation spec> <period> <asterisk>
	| <value expression> [ [ AS ] <alias> ]
*/

void SelectExpression() :
{/*@bgen(jjtree) SelectExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTSELECTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectExpression */
    try {
/*@egen*/   
    (   /* This looks ugly but I haven't found a better way to make it work. */
        LOOKAHEAD(5) RelationName() <PERIOD> Asterisk()
    |   LOOKAHEAD(5) SchemaName() <PERIOD> RelationName() <PERIOD> <ASTERISK>
    |   ValueExpression() [ LOOKAHEAD(2) [ <AS> ] Alias() ]
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<from list> ::=
        FROM
	<from list expression>
	<from list rest>

<from list rest> ::=
	[ <comma> <from list expression>
	<from list rest> ]
*/

void FromList() :
{/*@bgen(jjtree) FromList */
  SQLNode jjtn000 = new SQLNode(this, JJTFROMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FromList */
    try {
/*@egen*/
    <FROM>
    FromListExpression()
    ( <COMMA> FromListExpression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*

<from list expression> ::=
	  <relation> [ <joined relations> ]
*/

void FromListExpression() :
{/*@bgen(jjtree) FromListExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTFROMLISTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FromListExpression */
    try {
/*@egen*/
    Relation() ( LOOKAHEAD(2) JoinClause() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<relation> ::=
	  <single relation>
	| <named subquery>
*/

void Relation() :
{/*@bgen(jjtree) Relation */
  SQLNode jjtn000 = new SQLNode(this, JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Relation */
        try {
/*@egen*/
        SingleRelation()
    |   NamedSubquery()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
<named subquery> ::=
	<subquery> [ [ AS ] <alias> ]
*/

void NamedSubquery() :
{/*@bgen(jjtree) NamedSubquery */
  SQLNode jjtn000 = new SQLNode(this, JJTNAMEDSUBQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NamedSubquery */
    try {
/*@egen*/
    Subquery() [ LOOKAHEAD(2) [ <AS> ] Alias() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<subquery> ::=
	<left paren> <query> <right paren>
*/

void Subquery() :
{/*@bgen(jjtree) Subquery */
  SQLNode jjtn000 = new SQLNode(this, JJTSUBQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Subquery */
    try {
/*@egen*/
    <L_PAREN>
    Query()
    <R_PAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<single relation> ::=
	<relation spec> [ [ AS ] <alias> ]
*/

void SingleRelation() :
{/*@bgen(jjtree) SingleRelation */
  SQLNode jjtn000 = new SQLNode(this, JJTSINGLERELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SingleRelation */
    try {
/*@egen*/
    RelationSpec() [ LOOKAHEAD(2) [ <AS> ] Alias() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<relation spec> ::= [ <schema name> <period> ] <relation name>
*/

void RelationSpec() :
{/*@bgen(jjtree) RelationSpec */
  SQLNode jjtn000 = new SQLNode(this, JJTRELATIONSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelationSpec */
    try {
/*@egen*/
    [ LOOKAHEAD(2) SchemaName() <PERIOD> ] RelationName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<schema name> ::= <identifier>
*/

void SchemaName() :
{/*@bgen(jjtree) SchemaName */
  SQLNode jjtn000 = new SQLNode(this, JJTSCHEMANAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SchemaName */
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<relation name> ::= <identifier>
*/

void RelationName() :
{/*@bgen(jjtree) RelationName */
  SQLNode jjtn000 = new SQLNode(this, JJTRELATIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelationName */
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<join clause> ::=
	  <inner join spec> <on clause>
	| <outer join spec> <on clause>
	| <cross join spec>
*/

void JoinClause() :
{/*@bgen(jjtree) JoinClause */
  SQLNode jjtn000 = new SQLNode(this, JJTJOINCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JoinClause */
        try {
/*@egen*/
        InnerJoinSpec() OnClause()
    |   OuterJoinSpec() OnClause()
    |   CrossJoinSpec()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
<inner join spec> ::=
	[ INNER ] JOIN <from list expression>
*/

void InnerJoinSpec() :
{/*@bgen(jjtree) InnerJoinSpec */
  SQLNode jjtn000 = new SQLNode(this, JJTINNERJOINSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InnerJoinSpec */
    try {
/*@egen*/
    [ <INNER> ] <JOIN> FromListExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<outer join spec> ::=
	{ LEFT | RIGHT } [ OUTER ] JOIN <from list expression>
*/

void OuterJoinSpec() :
{/*@bgen(jjtree) OuterJoinSpec */
  SQLNode jjtn000 = new SQLNode(this, JJTOUTERJOINSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OuterJoinSpec */
    try {
/*@egen*/
    ( <LEFT> | <RIGHT> ) [ <OUTER> ] <JOIN> FromListExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<cross join spec> ::=
	CROSS JOIN <from list expression>
*/

void CrossJoinSpec() :
{/*@bgen(jjtree) CrossJoinSpec */
  SQLNode jjtn000 = new SQLNode(this, JJTCROSSJOINSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CrossJoinSpec */
    try {
/*@egen*/
    <CROSS> <JOIN> FromListExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<on clause> ::=
	ON <search condition>
*/

void OnClause() :
{/*@bgen(jjtree) OnClause */
  SQLNode jjtn000 = new SQLNode(this, JJTONCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OnClause */
    try {
/*@egen*/
    <ON> SearchCondition()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<where clause> ::=
	WHERE <search condition>
*/

void WhereClause() :
{/*@bgen(jjtree) WhereClause */
  SQLNode jjtn000 = new SQLNode(this, JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhereClause */
    try {
/*@egen*/
    <WHERE> SearchCondition()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<having clause> ::=
	HAVING <search condition>
*/

void HavingClause() :
{/*@bgen(jjtree) HavingClause */
  SQLNode jjtn000 = new SQLNode(this, JJTHAVINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HavingClause */
    try {
/*@egen*/
    <HAVING> SearchCondition()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<group by clause> ::=
	GROUP BY <group by list>
*/

void GroupByClause() :
{/*@bgen(jjtree) GroupByClause */
  SQLNode jjtn000 = new SQLNode(this, JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GroupByClause */
    try {
/*@egen*/
    <GROUP> <BY> GroupByList()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<group by list> ::=
	<group by expression>
	<group by list rest>

<group by list rest> ::=
	[ <comma> <group by expression>
	<group by list rest> ]
*/

void GroupByList() :
{/*@bgen(jjtree) GroupByList */
  SQLNode jjtn000 = new SQLNode(this, JJTGROUPBYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GroupByList */
    try {
/*@egen*/
    GroupByExpression()
    ( <COMMA> GroupByExpression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<group by expression> ::= <value expression>
*/

void GroupByExpression() :
{/*@bgen(jjtree) GroupByExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTGROUPBYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GroupByExpression */
    try {
/*@egen*/
    ValueExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<order by clause> ::=
	ORDER BY <order by list>
*/

void OrderByClause() :
{/*@bgen(jjtree) OrderByClause */
  SQLNode jjtn000 = new SQLNode(this, JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderByClause */
    try {
/*@egen*/
    <ORDER> <BY> OrderByList()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<order by list> ::=
	<order by expression>
	<order by list rest>

<order by list rest> ::=
	[ <comma> <order by expression>
	<order by list rest> ]
*/

void OrderByList() :
{/*@bgen(jjtree) OrderByList */
  SQLNode jjtn000 = new SQLNode(this, JJTORDERBYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderByList */
    try {
/*@egen*/
    OrderByExpression()
    ( <COMMA> OrderByExpression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<order by expression> ::= <value expression> [ ASC | DESC ]
*/

void OrderByExpression() :
{/*@bgen(jjtree) OrderByExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTORDERBYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderByExpression */
    try {
/*@egen*/
    ValueExpression() [ <ASC> | <DESC> ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<limit clause> ::=
	LIMIT <limit offset> [ <comma> <limit count> ]
*/

void LimitClause() :
{/*@bgen(jjtree) LimitClause */
  SQLNode jjtn000 = new SQLNode(this, JJTLIMITCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LimitClause */
    try {
/*@egen*/
    <LIMIT> LimitOffset() [ <COMMA> LimitCount() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<limit offset> ::= <value expression>
*/

void LimitOffset() :
{/*@bgen(jjtree) LimitOffset */
  SQLNode jjtn000 = new SQLNode(this, JJTLIMITOFFSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LimitOffset */
    try {
/*@egen*/
    ValueExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<limit count> ::= <value expression>
*/

void LimitCount() :
{/*@bgen(jjtree) LimitCount */
  SQLNode jjtn000 = new SQLNode(this, JJTLIMITCOUNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LimitCount */
    try {
/*@egen*/
    ValueExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// ##############################################################

/*
<value expression> ::=
	  <binary operator>
	| <parenthesized expression>
*/

/*
void ValueExpression() :
{}
{
        LOOKAHEAD(2) BinaryOperator()
    |   ParenthesizedExpression()
}
*/
/*
<binary operator> ::=
	<operand expression>
	<binary operator rest>

<binary operator rest> ::=
	[
		{ <arithmetical operator>
		| <equality test>
		| <logical test>
		| <null test>
		| <between test> }
		<binary operator rest>
	]
*/

void ValueExpression() :
{/*@bgen(jjtree) ValueExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTVALUEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ValueExpression */
    try {
/*@egen*/
    OperandExpression()
    (
            ArithmeticalOperator()
        |   EqualityTest()
        |   LogicalTest()
        |   NullTest()
        |   BetweenTest()
        |   InTest()
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<arithmetical operator> ::=
	{ <plus> | <minus> | <asterisk> | <slash> | <percent> | DIV | MOD }
	<operand expression>
*/

void ArithmeticalOperator() :
{/*@bgen(jjtree) ArithmeticalOperator */
  SQLNode jjtn000 = new SQLNode(this, JJTARITHMETICALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArithmeticalOperator */
    try {
/*@egen*/
    ( <PLUS> | <MINUS> | <ASTERISK> | <SLASH> | <PERCENT> | <DIV> | <MOD> )
    OperandExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<equality test> ::=
	{ <lt> | <gt> | <eq> | <lte> | <gte> | <ne> }
	<operand expression>
*/

void EqualityTest() :
{/*@bgen(jjtree) EqualityTest */
  SQLNode jjtn000 = new SQLNode(this, JJTEQUALITYTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EqualityTest */
    try {
/*@egen*/
    ( <LT> | <GT> | <EQ> | <LTE> | <GTE> | <NE> )
    OperandExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<logical test> ::=
	{ LIKE | AND | OR | XOR }
	<operand expression>
*/

void LogicalTest() :
{/*@bgen(jjtree) LogicalTest */
  SQLNode jjtn000 = new SQLNode(this, JJTLOGICALTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalTest */
    try {
/*@egen*/
    ( <LIKE> | <AND> | <OR> | <XOR> )
    OperandExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<null test> ::=
	IS [ NOT ] NULL
*/

void NullTest() :
{/*@bgen(jjtree) NullTest */
  SQLNode jjtn000 = new SQLNode(this, JJTNULLTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NullTest */
    try {
/*@egen*/
    <IS> [ <NOT> ] <NULL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<between test> ::=
	BETWEEN <operand expression>
	AND <operand expression>
*/

void BetweenTest() :
{/*@bgen(jjtree) BetweenTest */
  SQLNode jjtn000 = new SQLNode(this, JJTBETWEENTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BetweenTest */
    try {
/*@egen*/
    <BETWEEN> OperandExpression()
    <AND> OperandExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<parenthesized expression> ::=
	<left paren>
	<value expression>
	<right paren>
*/

void ParenthesizedExpression() :
{/*@bgen(jjtree) ParenthesizedExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTPARENTHESIZEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParenthesizedExpression */
    try {
/*@egen*/
    <L_PAREN> ValueExpression() <R_PAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<operand expression> ::=
	  <unary operator>
	| <unary operand>
*/

void OperandExpression() :
{/*@bgen(jjtree) OperandExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTOPERANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OperandExpression */
        try {
/*@egen*/
        UnaryOperator()
    |   UnaryOperand()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
<unary operator> ::=
	{ <exclamation> | NOT | <tilde> | <minus> }
	<operand expression>
*/

void UnaryOperator() :
{/*@bgen(jjtree) UnaryOperator */
  SQLNode jjtn000 = new SQLNode(this, JJTUNARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryOperator */
    try {
/*@egen*/
    ( <EXCLAMATION> | <NOT> | <TILDE> | <MINUS> | <PLUS> )
    OperandExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<unary operand> ::=
	  <function call>
	| <subquery>
	| <literal>
	| <column expression>
*/

void UnaryOperand() :
{/*@bgen(jjtree) UnaryOperand */
  SQLNode jjtn000 = new SQLNode(this, JJTUNARYOPERAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryOperand */
        try {
/*@egen*/
        LOOKAHEAD(2) FunctionCall()
    |   LOOKAHEAD(2) Subquery()
    |   Literal()
    |   ColumnExpression()
    |   ParenthesizedExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
<function call> ::=
	  <ordinary function call>
	| <aggregate function call>
	| <built-in function call>
*/

void FunctionCall() :
{/*@bgen(jjtree) FunctionCall */
  SQLNode jjtn000 = new SQLNode(this, JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionCall */
        try {
/*@egen*/
        OrdinaryFunctionCall()
    |   AggregateFunctionCall()
    |   BuiltInFunctionCall()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
<ordinary function call> ::=
	<function name>
	<left paren> <arg list> <right paren>
*/

void OrdinaryFunctionCall() :
{/*@bgen(jjtree) OrdinaryFunctionCall */
  SQLNode jjtn000 = new SQLNode(this, JJTORDINARYFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrdinaryFunctionCall */
    try {
/*@egen*/
    FunctionName()
    <L_PAREN> ArgList() <R_PAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<function name> ::= <identifier>
*/

void FunctionName() :
{/*@bgen(jjtree) FunctionName */
  SQLNode jjtn000 = new SQLNode(this, JJTFUNCTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionName */
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<arg list> ::=
	<argument>
	<arg list rest>

<arg list rest> ::=
	[ <comma> <argument>
	<arg list rest> ]
*/

void ArgList() :
{/*@bgen(jjtree) ArgList */
  SQLNode jjtn000 = new SQLNode(this, JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
    try {
/*@egen*/
    Argument()
    ( <COMMA> Argument() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<aggregate function call> ::=
	{ MIN | MAX | COUNT | AVG | SUM | AGGREGATE <function name> }
	<left paren> [ ALL | DISTINCT ] { ASTERISK | <argument> } <right paren>
*/

void AggregateFunctionCall() :
{/*@bgen(jjtree) AggregateFunctionCall */
  SQLNode jjtn000 = new SQLNode(this, JJTAGGREGATEFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AggregateFunctionCall */
    try {
/*@egen*/
    ( <MIN> | <MAX> | <COUNT> | <AVG> | <SUM> | <AGGREGATE> FunctionName() )
    <L_PAREN> [ Modifier() ] ( Asterisk() | Argument() ) <R_PAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<built-in function call> ::=
	  <cast call>
	| <convert call>
	| <exists call>
	| <in call>
	| <case call>
*/

void BuiltInFunctionCall() :
{/*@bgen(jjtree) BuiltInFunctionCall */
  SQLNode jjtn000 = new SQLNode(this, JJTBUILTINFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BuiltInFunctionCall */
        try {
/*@egen*/
        CastCall()
    |   ConvertCall()
    |   ExistsCall()
    |   CaseCall()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
<cast call> ::=
	CAST <left paren>
	<argument> AS <type>
	<right paren>
*/

void CastCall() :
{/*@bgen(jjtree) CastCall */
  SQLNode jjtn000 = new SQLNode(this, JJTCASTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CastCall */
    try {
/*@egen*/
    <CAST> <L_PAREN>
    Argument() <AS> Type()
    <R_PAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<convert call> ::=
	CONVERT <left paren>
	<argument> <right paren>
	USING <encoding name>
*/

void ConvertCall() :
{/*@bgen(jjtree) ConvertCall */
  SQLNode jjtn000 = new SQLNode(this, JJTCONVERTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConvertCall */
    try {
/*@egen*/
    <CONVERT> <L_PAREN>
    Argument()
    <USING> EncodingName() <R_PAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<exists call> ::=
	EXISTS <subquery>
*/

void ExistsCall() :
{/*@bgen(jjtree) ExistsCall */
  SQLNode jjtn000 = new SQLNode(this, JJTEXISTSCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExistsCall */
    try {
/*@egen*/
    <EXISTS> Subquery()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<in call> ::=
	IN { <subquery> | <left paren> <arg list> <right paren> }
*/

void InTest() :
{/*@bgen(jjtree) InTest */
  SQLNode jjtn000 = new SQLNode(this, JJTINTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InTest */
    try {
/*@egen*/
    <IN> ( LOOKAHEAD(2) Subquery() | <L_PAREN> ArgList() <R_PAREN> )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<case call> ::=
	CASE { <simple case expression> | <searched case expression> } END
*/

void CaseCall() :
{/*@bgen(jjtree) CaseCall */
  SQLNode jjtn000 = new SQLNode(this, JJTCASECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseCall */
    try {
/*@egen*/
    <CASE>
    (   SimpleCaseExpression()
    |   SearchedCaseExpression()
    ) <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<simple case expression> ::=
	<value expression>
	<searched case expression>
*/

void SimpleCaseExpression() :
{/*@bgen(jjtree) SimpleCaseExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTSIMPLECASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimpleCaseExpression */
    try {
/*@egen*/
    ValueExpression()
    SearchedCaseExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<searched case expression> ::=
	<when clauses>
	ELSE <default expression>
*/

void SearchedCaseExpression() :
{/*@bgen(jjtree) SearchedCaseExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTSEARCHEDCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SearchedCaseExpression */
    try {
/*@egen*/
    WhenClauses()
    [ <ELSE> DefaultExpression() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<when clauses> ::=
	<when clause>
	<when clauses rest>

<when clauses rest> ::=
	[ <when clause> ]
*/

void WhenClauses() :
{/*@bgen(jjtree) WhenClauses */
  SQLNode jjtn000 = new SQLNode(this, JJTWHENCLAUSES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhenClauses */
    try {
/*@egen*/
    ( WhenClause() )+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<when clause> ::=
	WHEN <when test>
	THEN <when option expression>
*/

void WhenClause() :
{/*@bgen(jjtree) WhenClause */
  SQLNode jjtn000 = new SQLNode(this, JJTWHENCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhenClause */
    try {
/*@egen*/
    <WHEN> WhenTest()
    <THEN> WhenOptionExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<when test> ::= <value expression>
*/

void WhenTest() :
{/*@bgen(jjtree) WhenTest */
  SQLNode jjtn000 = new SQLNode(this, JJTWHENTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhenTest */
    try {
/*@egen*/
    ValueExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<when option expression> ::= <value expression>
*/

void WhenOptionExpression() :
{/*@bgen(jjtree) WhenOptionExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTWHENOPTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhenOptionExpression */
    try {
/*@egen*/
    ValueExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


/*
<default expression> ::= <value expression>
*/

void DefaultExpression() :
{/*@bgen(jjtree) DefaultExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTDEFAULTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefaultExpression */
    try {
/*@egen*/
    ValueExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<encoding name> ::= <identifier>
*/

void EncodingName() :
{/*@bgen(jjtree) EncodingName */
  SQLNode jjtn000 = new SQLNode(this, JJTENCODINGNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EncodingName */
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<argument> ::= <value expression>
*/

void Argument() :
{/*@bgen(jjtree) Argument */
  SQLNode jjtn000 = new SQLNode(this, JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    ValueExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<column expression> ::=
	  <fully-qualified column name>
	| <qualified column name>
	| <unqualified column name>
*/

void ColumnExpression() :
{/*@bgen(jjtree) ColumnExpression */
  SQLNode jjtn000 = new SQLNode(this, JJTCOLUMNEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColumnExpression */
        try {
/*@egen*/
        LOOKAHEAD(4) FullyQualifiedColumnName()
    |   LOOKAHEAD(2) QualifiedColumnName()
    |   UnqualifiedColumnName()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
<fully-qualified column name> ::=
	<schema name> <period> <relation name> <period> <column name>
*/

void FullyQualifiedColumnName() :
{/*@bgen(jjtree) FullyQualifiedColumnName */
  SQLNode jjtn000 = new SQLNode(this, JJTFULLYQUALIFIEDCOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FullyQualifiedColumnName */
    try {
/*@egen*/
    SchemaName() <PERIOD> RelationName() <PERIOD> ColumnName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<qualified column name> ::=
	<relation name or alias> <period> <column name>
*/

void QualifiedColumnName() :
{/*@bgen(jjtree) QualifiedColumnName */
  SQLNode jjtn000 = new SQLNode(this, JJTQUALIFIEDCOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) QualifiedColumnName */
    try {
/*@egen*/
    RelationNameOrAlias() <PERIOD> ColumnName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<relation name or alias> ::= <identifier>
*/

void RelationNameOrAlias() :
{/*@bgen(jjtree) RelationNameOrAlias */
  SQLNode jjtn000 = new SQLNode(this, JJTRELATIONNAMEORALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelationNameOrAlias */
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<unqualified column name> ::= <column name>
*/

void UnqualifiedColumnName() :
{/*@bgen(jjtree) UnqualifiedColumnName */
  SQLNode jjtn000 = new SQLNode(this, JJTUNQUALIFIEDCOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnqualifiedColumnName */
    try {
/*@egen*/
    ColumnName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<column name> ::= <identifier>
*/

void ColumnName() :
{/*@bgen(jjtree) ColumnName */
  SQLNode jjtn000 = new SQLNode(this, JJTCOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColumnName */
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<alias> ::= <identifier>
*/

void Alias() :
{/*@bgen(jjtree) Alias */
  SQLNode jjtn000 = new SQLNode(this, JJTALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Alias */
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Identifier() :
{/*@bgen(jjtree) Identifier */
  SQLNode jjtn000 = new SQLNode(this, JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setTextValue(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<search condition> ::= <value expression>
*/

void SearchCondition() :
{/*@bgen(jjtree) SearchCondition */
  SQLNode jjtn000 = new SQLNode(this, JJTSEARCHCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SearchCondition */
    try {
/*@egen*/
    ValueExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// ##############################################################

/*
<literal> ::=
	  <numeric or string literal>
	| <boolean literal>
	| <null literal>
*/

void Literal() :
{/*@bgen(jjtree) Literal */
  SQLNode jjtn000 = new SQLNode(this, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Literal */
        try {
/*@egen*/
        NumericOrStringLiteral()
    |   BooleanLiteral()
    |   NullLiteral()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void NumericOrStringLiteral() :
{/*@bgen(jjtree) NumericOrStringLiteral */
  SQLNode jjtn000 = new SQLNode(this, JJTNUMERICORSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) NumericOrStringLiteral */
    try {
/*@egen*/
    ( t = <INTEGER_LITERAL>
    | t = <FLOATING_POINT_LITERAL>
    | t = <STRING_LITERAL> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setTextValue(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<boolean literal> ::= TRUE | FALSE
*/

void BooleanLiteral() :
{/*@bgen(jjtree) BooleanLiteral */
  SQLNode jjtn000 = new SQLNode(this, JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) BooleanLiteral */
    try {
/*@egen*/
    ( t = <TRUE>
    | t = <FALSE> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setTextValue(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<null literal> ::= NULL
*/

void NullLiteral() :
{/*@bgen(jjtree) NullLiteral */
  SQLNode jjtn000 = new SQLNode(this, JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) NullLiteral */
    try {
/*@egen*/
    t = <NULL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setTextValue(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// ##############################################################

/*
<type> ::=
	  <numeric type>
	| <string type>
	| <boolean type>
	| <datetime type>
*/

void Type() :
{/*@bgen(jjtree) Type */
  SQLNode jjtn000 = new SQLNode(this, JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
        NumericType()
    |   StringType()
    |   BooleanType()
    |   DatetimeType()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
<numeric type> ::= TINYINT | SMALLINT | INT | INTEGER | BIGINT
*/

void NumericType() :
{/*@bgen(jjtree) NumericType */
  SQLNode jjtn000 = new SQLNode(this, JJTNUMERICTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) NumericType */
    try {
/*@egen*/
    ( t = <TINYINT>
    | t = <SMALLINT>
    | t = <INT>
    | t = <INTEGER>
    | t = <BIGINT> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setTextValue(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<string type> ::= CHAR | VARCHAR
*/

void StringType() :
{/*@bgen(jjtree) StringType */
  SQLNode jjtn000 = new SQLNode(this, JJTSTRINGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) StringType */
    try {
/*@egen*/
    ( t = <CHAR>
    | t = <VARCHAR> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setTextValue(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<boolean type> ::= BOOLEAN
*/

void BooleanType() :
{/*@bgen(jjtree) BooleanType */
  SQLNode jjtn000 = new SQLNode(this, JJTBOOLEANTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) BooleanType */
    try {
/*@egen*/
    t = <BOOLEAN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setTextValue(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
<datetime type> ::= DATE | TIME | DATETIME
*/

void DatetimeType() :
{/*@bgen(jjtree) DatetimeType */
  SQLNode jjtn000 = new SQLNode(this, JJTDATETIMETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DatetimeType */
    try {
/*@egen*/
    ( t = <DATE>
    | t = <TIME>
    | t = <DATETIME> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setTextValue(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

